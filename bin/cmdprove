#!/bin/bash
#
# Copyright (C) 2025 Moisés Castañeda
# SPDX-License-Identifier: GPL-3.0-or-later
# Licensed under GPL-3.0-or-later. See LICENSE file.
#
# A test framework for command-line programs and Bash functions.
# To see the full documentation, run this script passing the `--help` flag.
#

# Configure the shell session.
# Set strict runtime options.
set -Eeu
set -o pipefail
shopt -s extglob

# Ensure this file is being executed as an independent program and not sourced:
if (return 0 2>/dev/null); then
  echo "ERROR: $0: This script must be executed independently, not sourced."
  exit 5
fi


# Define search paths:
bindir="$( cd "$( dirname "$0" )" >/dev/null 2>&1 && pwd )"

# Installed or built docs
doc_path="$bindir/../share/doc/cmdprove/txt"
lib="$bindir/../lib/cmdprove"

# Load all the libraries:
source "$lib/util/data_manip.sh"
source "$lib/util/string.sh"
source "$lib/util/shell_env.sh"
source "$lib/util/filesys.sh"
source "$lib/process.sh"
source "$lib/test_driver.sh"
source "$lib/test_api.sh"
source "$lib/help_driver.sh"
source "$lib/help_content.sh"   # Help content must be the last import
unset lib


# GLOBALS

# External variables (set defaults if not given):
#
: "${TEST_DEBUG:=}"
: "${TEST_OUT_DIR:=}"
# Functions whose name matches this pattern are considered tests:
: "${TEST_FUNC_PATTERN:=test_*}"

prog_name="$(basename "$0")"

# The list of test files to execute:
test_file_list=()

# Commands to execute in the environment of each test script, before sourcing
# the actual script:
pretest_commands=( "set -u" )


# Parses the command line, setting globals.
#
function parse_cmdline {

  local wait_arg=
  local arg
  local last_test_script=

  for arg in "$@"; do
    shift

    if [[ -n "$wait_arg" ]]; then
      case "$wait_arg" in
        include_test)
          if [[ -z "$last_test_script" ]]; then
            abort "Invalid arguments: --only should appear after a test script."
          fi
          subtest_inclusion_list[$arg]="$last_test_script"
          ;;
        *)
          abort "Internal Error: Bad wait_arg: '$wait_arg'"
      esac
      wait_arg=
      continue
    fi

    case "$arg" in
      -o|--only)
        wait_arg=include_test
      ;;
      --debug)
        TEST_DEBUG=1
      ;;
      --trace-driver)
        enable_tracing
      ;;
      --step-driver)
        enable_tracing -s
      ;;
      --trace-test)
        pretest_commands+=( "enable_tracing" )
      ;;
      --step-test)
        pretest_commands+=( "enable_tracing -s" )
      ;;
      -h|--help)
        local topic="${1:-}"
        case "$topic" in
          '')
            usage
            echo -e "\nAvailable test API functions:\n"
            help_api summary
            echo -e "\nFor details run: $prog_name --help {function_name}"
          ;;
          *)
            help_api "$topic" ''
          ;;
        esac
        terminate 0
      ;;
      -*)
        abort "Unknown option: '$arg'"
      ;;
      *)
        test_file_list+=( "$arg" )
        last_test_script="$arg"
      ;;
    esac
  done

  if [[ -n "$wait_arg" ]]; then
    abort "Missing argument for option: $arg"
  fi
}


# Export all the variables and functions needed in test scripts.
#
export TEST_DEBUG
export TEST_OUT_DIR
export TEST_FUNC_PATTERN
export TEST_IGNORE_STDERR
export TEST_IGNORE_STDOUT
export TEST_IGNORE_RETCODE
#
export -f describe
export -f assert
export -f is
export -f note
export -f debug
export -f test_error
export -f enable_tracing
export -f abort
export -f terminate
#
export -f chomp
export -f prefix_lines
export -f repeat_string
export -f is_sort_op
export -f dict_sort_keys_by_val
export -f array_pop
export -f get_unique_file
export -f get_matching_functions
#
export -f _compare_files
export -f _test_control
export -f _before_test_script
export -f _after_test_script

# Entry point
run_all "$@"

